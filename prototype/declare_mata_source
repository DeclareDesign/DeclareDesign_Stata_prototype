class design{
    real scalar n, m, delta, seed    /* m treated units, delta Z effect */
    numeric matrix Y, id, Z     /* matrices to ultimately allow cluster assignment */
    string scalar distribution, estimand, estimator
    string vector x_variables
    real scalar param1, param2       /* parameters for distribution of Y */
    pop(), PO(), estimand(), assign(), estimator()  /* reveal() */      
    /* helper functions, wrappers for declare_* functions */
}

function design::pop()
{
  return(declare_population(n))
}

function design::assign()
{
  return(declare_assignment(id, m))
}

function design::estimand(){
  if(estimand == "ATE"){
    mean(Y :* Z - Y :* (1 :- Z))
  }else{
      "only ATE is implemented"
  }
}

function design::estimator(){
  x_variables = tokens(estimator)  /* assumes input "Y Z" or "Y Z x1 x2 x3" */
  x_variables = x_variables[2..length(x_variables)]
}

function design::PO(){

/*
distribution must be "bernoulli", "binomial", "normal"
If Gaussian, param1 is mean and param2 is sd; potential outcomes Y ~ N(delta*Z + mu, sd)
If Bernoulli, Y ~ bernoulli(delta*Z + p)
If Binomial, param2 is k, the number of trials
*/

    if(distribution == "normal"){

        Y = rnormal(n, 1, param1, param2) 
        Y = Y + delta*Z
  
    } 

    if(distribution == "bernoulli"){

        Y = J(n, 1, 0)

        Y_Z_0 = rbinomial(n, 1, 1, param1)
        Y_Z_1 = rbinomial(n, 1, 1, param1 + delta)

        for(i=1; i<=n; i++){
            if(Z[i] == 1){
                Y[i] = Y_Z_1[i]
            }else{
                Y[i] = Y_Z_0[i]
            }
        }
    }

    if(distribution == "binomial"){

        Y = J(n, 1, 0)

        Y_Z_0 = rbinomial(n, 1, param2, param1)
        Y_Z_1 = rbinomial(n, 1, param2, param1 + delta)

        for(i=1; i<=n; i++){
            if(Z[i] == 1){
                Y[i] = Y_Z_1[i]
            }else{
                Y[i] = Y_Z_0[i]
            }
        }
    }    
    return(Y)

}




/* functions that could be called independently (or collapsed into the above functions)... */

function declare_population(N){
  id = (1..N)'
  return(id)
}

function declare_assignment(numeric matrix id, m){

    Z = J(rows(id), 1, 0)
    Z[1..m] = Z[1..m] :+ 1
    return(Z)

}

/* post-design (not implemented) */ 

class diagnosis extends design{

  string vector diagnosands
  real scalar Nsims
  matrix sims
  
  diagnose_design(), draw_data(), get_estimates(), get_estimands()
  declare_diagnosands(), declare_reveal()
  
}



