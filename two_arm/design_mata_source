mata drop *
mata drop *()

/* mata mosave design(), dir(PERSONAL) replace */

class design{

    string initialize /* STATA command */
    
    real scalar N, N_sims, N_bootstrap 
    real scalar assignment_prob, M 
    /* M treated units or probablity p */
    /* suppose a = design() */
    /* a.M == . equivalent to is.null() for a.M */
    real scalar delta, bias, RMSE, Power, Coverage
    real scalar Mean_Estimate, SD_Estimate, Mean_SE
    real scalar Type_S_Rate, Mean_Estimand
    real scalar control_mean, treatment_mean
    real scalar control_sd, treatment_sd, rho /* or use matrix Sigma */
    real scalar seed    
    numeric matrix u_0, u_1, Y, Y_Z_0, Y_Z_1, id, Z, Sigma, estimands, estimates   
    string scalar name, distribution, estimand, estimator
    string scalar description, design_type
    string vector x_variables
    pop(), PO(), estimand(), assign(), Estimator(), reveal()
    diagnose()
    
}

function design::pop()
{
  if(N == .){ 
    display("warning: N not initialized.") 
  }

  id = (1..N)'
  
  if(design_type == "two_arm"){
  
    if(rho == . || control_mean == . || control_sd == .){ 
    display("warning: One or more constants anticipated by the simple two arm design population declaration not found (i.e., rho, control_mean, control_sd).") 
    }
    
    u_0 = rnormal(N, N_sims, control_mean, control_sd)
    if(rho == 1){
      u_1 = u_0 /* mata rnormal() cannot handle sd == 0 */
    }else{
      u_1 = rnormal(1, 1, u_0, sqrt(1 - rho^2)) /* inherits from u_0 */
    }
  }
}

function design::assign()
{
  if(M != . && assignment_prob == .){
  
    Z = J(N, N_sims, 0)
    Z[1..M, .] = Z[1..M, .] :+ 1
  
  }if(M == . && assignment_prob != .){
  
    Z = rbinomial(N, N_sims, 1, assignment_prob) 
    
  }else{
    display("warning: please initialize M, the number of treated units, or assignment_prob (but not both)")
  }
}

function design::estimand(){
  if(estimand == "ATE"){
    estimands = mean(Y_Z_1 :- Y_Z_0)
    Mean_Estimand = mean(estimands')
  }else{
      "only ATE is implemented"
  }
}

function design::Estimator(){

    X = J(N, 2, 1)
    b = J(2, N_sims, 0)
    
    for(i = 1; i <= N_sims; i++){
      X[.,1] = Z[.,i]
      b[.,i] = invsym(quadcross(X, X)) * quadcross(X, Y[.,i])
    }
    
    estimates = b[1,.]
    Mean_Estimate = mean(estimates')
    SD_Estimate = variance(estimates')^.5
    bias = mean((estimates - estimands)')
    RMSE = mean((estimates :- estimands):^2)
    Type_S_Rate = mean((sign(estimands) :!= sign(estimates))')
    
}

function design::PO(){

      Y_Z_0 = u_0 :* control_sd :+  control_mean    
      Y_Z_1 = u_1 :* treatment_sd :+ treatment_mean
      Y = (1 :- Z):*Y_Z_0 + Z:*(Y_Z_1)
    
}

