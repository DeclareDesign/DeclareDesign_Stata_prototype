mata drop *
mata drop *()

class design{

    string initialize /* STATA command */
    
    string design /* e.g. "two_arm" for simple recipes */ 
    
    real scalar N, N_sims 
    real scalar assignment_prob, M 
    /* M treated units or probablity p */
    /* suppose a = design() */
    /* a.M == . equivalent to is.null() for a.M */
    real scalar delta
    real scalar control_mean, treatment_mean
    real scalar control_sd, treatment_sd, rho /* or use matrix Sigma */
    real scalar seed    
    numeric matrix u_0, u_1, Y, Y_Z_0, Y_Z_1, id, Z, Sigma     
    string scalar name, distribution, estimand, estimator
    string description
    string vector x_variables
    real scalar param1, param2       /* parameters for distribution of Y */
    pop(), PO(), estimand(), assign(), estimator(), reveal()       
    /* helper functions, wrappers for declare_* functions */
}

function design::pop()
{
  if(N == .){ 
    display("warning: N not initialized.") 
  }

  id = (1..N)'
  
  if(design == "two_arm"){
  
    if(rho == . || control_mean == . || control_sd == .){ 
    display("warning: One or more constants anticipated by the simple two arm design population declaration not found (i.e., rho, control_mean, control_sd).") 
    }
    
    u_0 = rnormal(N, N_sims, control_mean, control_sd)
    if(rho == 1){
      u_1 = u_0 /* mata rnormal() cannot handle sd == 0 */
    }else{
      u_1 = rnormal(1, 1, u_0, sqrt(1 - rho^2)) /* inherits from u_0 */
    }
  }
}

function design::assign()
{
  if(M != . && assignment_prob == .){
  
    Z = J(N, N_sims, 0)
    Z[1..M, .] = Z[1..M, .] :+ 1
  
  }if(M == . && assignment_prob != .){
  
    Z = rbinomial(N, N_sims, 1, assignment_prob) 
    
  }else{
    display("warning: please initialize M, the number of treated units, or assignment_prob (but not both)")
  }
}

function design::estimand(){
  if(estimand == "ATE"){
    mean(Y_Z_1 :- Y_Z_0)
  }else{
      "only ATE is implemented"
  }
}

function design::estimator(){

  if(estimator == .){
  
  }else{
    x_variables = tokens(estimator)  /* assumes input "Y Z" or "Y Z x1 x2 x3" */
    x_variables = x_variables[2..length(x_variables)]
  }
}

function design::PO(return_treated){

    if(design == "two_arm"){
      Y_Z_0 = u_0
      Y_Z_1 = u_1 + delta
    }

    if(distribution == "normal"){

        Y_Z_0 = rnormal(N, 1, param1, param2) 
  
    } 

    if(distribution == "bernoulli"){

        Y_Z_0 = rbinomial(N, 1, 1, param1)

    }

    if(distribution == "binomial"){
    
        Y_Z_0 = rbinomial(N, 1, param2, param1)

    }
    
}



function declare_assignment(numeric matrix id, M){

    return(Z)

}



